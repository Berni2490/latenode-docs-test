{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Latenode Documentation","text":"<p>Welcome to the official documentation of Latenode, an open low-code tool that helps you to create automations and AI agents with ease.</p> <p>If you're new to this documentation, we recommend reading the Organization of the documentation section to get an overview of what this documentation offers.</p> <p>The table of contents in the top menu should let you easily access the documentation for your topic of interest. You can also use the search function in the top-right corner.</p> <p></p>"},{"location":"#about-latenode","title":"About Latenode","text":"<p>Short general overview of the tool: what kind of value it can provide to its users</p> <p></p>"},{"location":"#organization-of-the-documentation","title":"Organization of the documentation","text":"<p>This documentation is organized into several sections:</p> <ul> <li>Home contains this introduction as well as information about Latenode, its history, its licensing, etc.</li> <li>Tutorials contains all necessary information for new users on starting to make automations and AI agents. This is the best place to start if you're new!</li> <li>Concepts contains theoretical explanations of the entities handled by Latenode, such as automations, scenarios, nodes, and more.</li> <li>The User Guide contains instructions on specific tasks that you may face during the use. You can read it in any order as you need.</li> <li>The Admin Guide contains sections intended for administrators of standalone version of Latenode.</li> <li>The Node Reference contains the full list of available nodes and their functional descriptions.</li> <li>Community is dedicated to the life of Latenode's community and contains a list of recommended third-party tutorials and materials outside of this documentation.</li> <li>About contains information about the Latenode team, contacts, careers and so on.</li> </ul>"},{"location":"about/","title":"About","text":"<p>Information about the Latenode team, contacts, careers and so on</p> <p>Hi, I'm Konstantin Makushev, a technical writer. I have made this website as a test task for the TW position at Latenode. The task was to prepare documentation on the base of the YouTube video.</p> <p>To see the result, refer to the Your first personal assistant tutorial.</p> <p>The site also includes some of my thoughts on the potential target structure for the entire Latenode Open Source documentation. You can find them in the Organization of the documentation section.</p> <p>Note</p> <p>All information presented on this site is already publicly available at the time of its publication. Therefore, I consider this information non-confidential and reserve the right to use this site further as an example of my work.</p> <p>If you have any objections on this matter, please contact me via Linkedin or Telegram (<code>@mkm0190</code>).</p>"},{"location":"admin_guide/installation/","title":"Installation","text":"<p>The Admin Guide category should include advanced guides for those users who are going to install and support standalone version of the Latenode</p>"},{"location":"basic_tutorials/first_pa/","title":"Your first personal assistant","text":"<p>In this step-by-step tutorial, you'll create your first personal AI assistant using Latenode. By the end of the tutorial, you'll have a simple yet complete AI assistant that can get natural-language tasks from the Telegram chat and helps you to handle your e-mails, tasks and meetings. See the final schema of the assistant in the image below.</p> <p></p> <p>The tutorial assumes that:</p> <ul> <li>You already have an account and know some Latenode basics. If not, you should go through Getting started first.</li> <li>You are using an online-version of Latenode. If you are using a standalone version, some interfaces, links and details may vary.</li> </ul> <p>The major steps are:</p> <ol> <li>Add necessary nodes</li> <li>Configure the tools</li> <li>Set up the environment</li> <li>Configure the agent</li> <li>Test the result</li> </ol> <p></p>"},{"location":"basic_tutorials/first_pa/#add-necessary-nodes","title":"Add necessary nodes","text":"<p>In this short first part, we'll fill a new scenario with necessary nodes.</p>"},{"location":"basic_tutorials/first_pa/#create-a-scenario","title":"Create a scenario","text":"<p>Let's create a new scenario and add the first node:</p> <ol> <li>Log in to Latenode and go to scenarios page.</li> <li>Press Create a new scenario and optionally set the scenario name at the left corner of the page. For example, let it be <code>My First AI Assistant</code>.</li> <li> <p>Press Add a Node to Begin and choose AI Agent... from the list of available nodes. Then choose common AI Agent node.</p> <p></p> <p>The node appears on the board and the node settings window pops up. Press the node name <code>UNTITLED</code> and rename to <code>Stanley</code>. For now, leave other settings at their default values and close the window. We'll back here later.</p> </li> </ol> <p>This AI Agent node is the brain of our assistant. It will manage the other nodes.</p> <p>We want our assistant to be able to read mails and create drafts, check and create events in Google Calendar, list and create tasks in a task tracker. Now, let's add nodes representing these tools.</p>"},{"location":"basic_tutorials/first_pa/#add-tool-nodes","title":"Add tool nodes","text":"<ol> <li>Press Add node in the bottom menu. Find and click Gmail... app. Use the search field to find it easy.</li> <li>Choose the Create Draft node. </li> <li>Repeat the process for the Find Email node.</li> <li> <p>Add the following nodes in a similar way:</p> <ul> <li>List Events and Create Event nodes from the Google Calendar... app.</li> <li>List uncompleted tasks and Create Task nodes from the Todoist... app.</li> <li>Create Chat Completion from the AI: Perplexity... app. The assistant will use it to search for information on the internet.</li> </ul> </li> <li> <p>Connect the AI Agent node with every tool node. You should get a layout like in the image below.</p> </li> </ol> <p></p> <p>You can see that our tool nodes are marked with yellow triangles. It means that we should configure this nodes properly.</p> <p></p>"},{"location":"basic_tutorials/first_pa/#configure-the-tools","title":"Configure the tools","text":""},{"location":"basic_tutorials/first_pa/#authorize-nodes","title":"Authorize Nodes","text":"<p>Let's give authorization tokens to our nodes to connect them with real systems \u2014 Todoist, Gmail, and Calendar:</p> <ol> <li>Click a Todoist node and press Sign in. If you are not authorized in Todoist yet, system prompts you to sign in.</li> <li>Sing in if needed. You'll see that the Connection field contains an auth token.</li> <li>Press Save and close the window.</li> <li>Click another Todoist node and make sure that it has the same auth token appointed. You can manage your authorizations and rename them in Authorizations section in left menu.</li> <li>Repeat above steps for Gmail and Calendar nodes. You may need to grant the necessary permissions to Latenode. This is safe.</li> </ol>"},{"location":"basic_tutorials/first_pa/#fill-in-fields","title":"Fill in fields","text":"<p>Now we need to give our nodes descriptive names, clear descriptions and specify <code>fromAIAgent</code> operator for some fields. It provides the AI Agent with reliable information about these nodes.</p> <ol> <li>Click Perplexity node and change its name on the top from Untitled to web-search. This is not a trivial step, as the AI agent uses the node name to understand its purpose.</li> <li>Tweak tool description like this: <code>Perplexity is an AI-powered search engine delivering accurate, concise answers and context</code>.</li> <li>Click the User prompt field, delete prefilled text, and choose the <code>fromAIAgent</code> operator in popup menu. Tweak the prompt like this: <code>Your new question prompt</code>.</li> <li>Press Save.</li> </ol> <p></p> <p>Now let's set up our Google calendar nodes:</p> <ol> <li>Click List events node and rename it as list_calendar_events.</li> <li>In the Calendar ID field choose your Google calendar.</li> <li>In the Tool description field insert the following text: <code>Retrieves events from Google Calendar within the specified window</code>.</li> <li>Choose your time zone in the Time Zone field.</li> <li>Toggle Show advanced settings and find Time Max and Time Min fields. This parameters define the time window we mentioned in tool description. Click Time Max and choose the <code>fromAIAgent</code> operator in popup menu. The operator is filled in automatically, but let's tweak the prompt like this: <code>Must be an RFC3339 timestamp with mandatory time zone offset, for example: 2011-06-03T10:00:00+03:00</code>. Hereinafter <code>+03:00</code> is your UTC time zone, replace it accordingly. Repeat this for the Time Min field.</li> <li>Press Save.</li> </ol> <p></p> <p>Configure the rest of nodes in a similar way. Corresponding fields are listed below.</p> <ul> <li> <p>Create Event:</p> <ul> <li>Name \u2014 <code>create_calendar_event</code></li> <li>Calendar ID \u2014 your Google calendar</li> <li>Tool description \u2014 <code>Creates a calendar event</code></li> <li>Start Date \u2014 <code>Format according to RFC3339: yyyy-mm-dd-Thh:mm:ss+03:00</code></li> <li>End Date \u2014 <code>Format according to RFC3339: yyyy-mm-dd-Thh:mm:ss+03:00</code></li> <li>Summary \u2014 <code>Title of event</code> (by default).Replace default <code>Summary</code> with <code>Title</code></li> <li>Description \u2014 <code>Description</code></li> </ul> </li> <li> <p>List Uncompleted Tasks:</p> <ul> <li>Name \u2014 <code>list_tasks</code></li> <li>Tool description \u2014 <code>Fetches all uncompleted tasks from Todoist</code></li> <li>Project ID \u2014 a project ID from the dropdown list</li> </ul> </li> <li> <p>Create Task:</p> <ul> <li>Name \u2014 <code>create_task</code></li> <li>Tool description \u2014 <code>Creates task in task tracker</code></li> <li>Content \u2014 default <code>fromAIAgent</code> prompt</li> <li>Priority \u2014 <code>fromAIAgent</code> operator with prompt <code>Task priority from 1 (normal) to 4 (urgent)</code></li> <li>Due Datetime \u2014 <code>fromAIAgent</code> operator with prompt <code>Specific date and time in RFC3339 format in UTC, for example: \"2024-09-26T11:30:00+03:00\". Leave blank if no date is required.</code></li> </ul> </li> <li> <p>Create Draft:</p> <ul> <li>Name \u2014 <code>create_email_draft</code></li> <li>Tool description \u2014 <code>Creates draft (creates an email but not send)</code> (default)</li> <li>Subject \u2014 default <code>fromAIAgent</code> prompt</li> <li>Email Body \u2014 tweak the default prompt like this: <code>Include an email body in plain text</code></li> <li>To \u2014 default <code>fromAIAgent</code></li> <li>From name \u2014 your name</li> </ul> </li> <li> <p>Find Email:</p> <ul> <li>Name \u2014 <code>list_email_unreads</code></li> <li>Tool description \u2014 <code>Finds an email message</code></li> <li>Label ID \u2014 <code>UNREAD</code></li> </ul> </li> </ul> <p>The tools are configured and now we should set up a communication environment to speak with our AI Agent.</p> <p></p>"},{"location":"basic_tutorials/first_pa/#set-up-the-environment","title":"Set up the environment","text":"<p>Note</p> <p>In this tutorial we will use a Telegram bot. But generally, instead of it you can use Mailhook or any similar tool.</p>"},{"location":"basic_tutorials/first_pa/#create-a-bot","title":"Create a bot","text":"<p>Let's configure a Telegram bot to communicate with our assistant:</p> <ol> <li>Log in to Telegram. If you don't have one, you can install a desktop version from the official site and sign up.</li> <li>Search for the <code>@botfather</code> bot in the search field and go to the dialogue.     </li> <li>Press Create a new bot in the interface. </li> <li>Set up the bot name as <code>Stanley</code> and bot username as <code>stanely_assistant_&lt;you own nickname&gt;</code>. Press Create Bot.</li> <li>Copy the API token of the bot to the clipboard.</li> <li>Go to Latenode, choose Authorizations from the left panel and create a new authorization for Telegram bot. Paste the API token here and click Authorize.</li> </ol>"},{"location":"basic_tutorials/first_pa/#add-telegram-nodes","title":"Add Telegram nodes","text":"<p>Now we need to add Telegram nodes to our scenario:</p> <ol> <li>Delete the default Trigger on Run once node from the scenario.</li> <li>Press Add node, find Telegram app and choose New Updates (Instant) node. Connect it to the AI Agent node in place of deleted trigger.</li> <li>Click the added node and choose the authorization we've added earlier.</li> <li>In the Allowed updates field choose <code>message</code>, so the node will trigger on every message.</li> <li>Press Add node, find Telegram app and choose the Send Text Message or Reply node. Connect the AI Agent node to it, like in image below. It will receive replies from our agent.</li> <li>Add authorization to this node as above and fill the Chat ID and Text fields with <code>1</code> as placeholders.</li> </ol> <p></p>"},{"location":"basic_tutorials/first_pa/#add-a-variable-handler","title":"Add a variable handler","text":"<p>Set up how to handle messages sent by the Telegram bot:</p> <ol> <li>Click the New Updates (Instant) node and press the Run button. It triggers a mock message. The JSON-structure of the message appears in a popup window. You may investigate it shortly. We are interested in <code>chat.id</code> and <code>text</code> fields.</li> <li>Click Add node and find the SetVariables node. Place and connect it between the New Updates (Instant) and the AI Agent node, like in image below. The node will store necessary JSON variables of the message.</li> <li>Click the SetVariables node, rename it to <code>Input</code> and add two keys: <code>message</code> and <code>chat_id</code>. </li> <li>For the <code>message</code> key click the Value field, choose Telegram in the popup menu, find the <code>text</code> field and click an arrow icon to import the path as a value. </li> <li> <p>Repeat for the <code>chat_id</code> key but with the <code>chat.id</code> field instead.</p> <p></p> </li> <li> <p>Go back to the Send Text Message or Reply node and set <code>_.chat_id</code> variable for the Chat ID node.</p> </li> </ol> <p>We have just finished setting up the configuration for the Telegram bot and the related nodes. Now, we should configure the AI Agent node itself.</p> <p></p>"},{"location":"basic_tutorials/first_pa/#configure-the-agent","title":"Configure the agent","text":""},{"location":"basic_tutorials/first_pa/#set-up-the-memory","title":"Set up the memory","text":"<ol> <li>Click the AI Agent node.</li> <li>Click the Session ID field. In the appeared menu go to Tools \u2192 Variables tab and choose <code>chat_id</code> variable. </li> <li>Click the User Prompt field. In the appeared menu go to Tools \u2192 Variables tab and choose <code>message</code> variable. Now our agent gets the context from the Telegram chat that we configured before.</li> <li>(Optional) Toggle Show advanced settings and look at the Context window length field. It defines how many previous messages the agent remembers. The default value is <code>25</code> and it is fine for this tutorial, let's keep it. You can increase this value in the future if necessary for your needs. But keep in mind that higher values increase a probability of hallucinations.</li> </ol>"},{"location":"basic_tutorials/first_pa/#prepare-a-system-prompt","title":"Prepare a system prompt","text":"<p>Now let's provide our agent with a system prompt. This is the most important part of any AI assistant, as it defines it's general behavior. For this tutorial, we'll use our pre-prepared prompt, but we generally recommend checking out our Prompting Guide.</p> <ol> <li> <p>Familiarize yourself with the prompt below and copy it to clipboard:</p> <pre><code># Personality\nYou are **Stanley**, a pragmatic, friendly personal assistant. You keep &lt;Username&gt; organized and ask the essential questions.\n\n# Environment\nYou run in **Telegram** chat. You orchestrate tools (Google Calendar, Todoist, Gmail, AI Web Search/Perplexity) but cannot see &lt;Username&gt;'s screen. Assume local time is &lt;your timezone, e.g., **UTC+03:00 (Asia/Nicosia)**&gt;.\n\n# Tone\nBe concise and direct: 1-3 short sentences, bullets when useful. In replies, use **conversational dates** (e.g., \"today at 19:00\", \"on Friday afternoon\").\n\n# Goal\nHelp &lt;Username&gt; with time management, task tracking, and project coordination using the tools available to you (calendar, task tracker, email, wes search).\n\n# Guardrails\nIn **tool calls** always pass timestamps in **RFC3339 format + &lt;your UTC time difference, e.g., 03:00&gt;**. In chat keep conversational times.\n\n# Tools\n- `list_calendar_events` \u2014 get calendar events for a time range.\n    - Use to present upcoming events, check conflicts, or fetch details needed for scheduling.\n    - Use before proposing a plan for a day/week or when &lt;Username&gt; asks \"When am I free/busy?\"\n- `create_calendar_event` \u2014 create a calendar event.\n    - Use after confirming title, date/time, duration, and attendees. Include a Meet link if available.\n- `list_tasks` \u2014 fetch incomplete Todoist tasks.\n    - Use to create a prioritized plan; sort by due date then importance; call out overdue items.\n- `create_task` \u2014 create a Todoist task.\n    - Use to capture action items from chat or email; include due date/time and labels if provided.\n- `list_email_inbox` \u2014 get inbox email messages.\n    - Use to triage unread mail and extract actionable items (meetings, invoices, requests).\n- `create_email_draft` \u2014 create email drafts.\n    - Use to write replies with clear nest steps (e.g., propose 2-3 time slots, bullet answers).\n- `web_search` \u2014 perplexity AI search.\n    - Use for quick research, examples, or facts to enrich replies or proposals (keep it brief: 2-3 bullets).\n\n# Workflow\n- **Stay current:** Before acting, ensure you have the required context from `list_calendar_events`, `retrieve_calendar_events`, `list_tasks`, and (if relevant) `list_email_inbox`. If you already checked it within the last **3 hours**, you are up to date.\n- **Email triage:**\n    - If an email mentions *demo/meeting/call* \u2192 check availability with `retrieve_calendar_events`, propose 2-3 slots, then `create_calendar_event` + `create_email_draft`.\n    - If an email mentions *invoice/payment/deadline* \u2192 `create_task` with due date and label; draft a brief acknowledgment if needed.\n- **Planing:** When &lt;Username&gt; asks to plan a day/week, pull `retrieve_calendar_events` and `list_tasks`, propose a realistic schedule, then create events/tasks after a confirmation.\n- **Review:** On request, produce a concise daily/weekly review (completed vs. pending, upcoming deadlines, meetings to confirm).\n\n# User context\n- Name: **&lt;Username&gt;**; lives in **&lt;City&gt; (&lt;UTC Timezone&gt;)**.\n- Role: &lt;Your role and duties&gt;\n- Typical sleep: **&lt;Your do-not-disturb time window&gt;** (avoid scheduling here unless asked).\n- Preferences: default meeting length **30 min**.\n\n# Current time\n`{{now}}` (in UTC)\n</code></pre> </li> <li> <p>Paste it to the System message field and replace all the placeholders (<code>&lt;&gt;</code>) with you Telegram Username, timezone, city, and role. You can also edit and tweak the prompt as needed.</p> </li> <li>In the Model field choose an LLM to handle your requests. For this assistant we recommend choosing the <code>OpenAI: GPT-5 mini</code>, as it is relatively cheap and would be enough for our tasks.</li> </ol>"},{"location":"basic_tutorials/first_pa/#connect-the-output","title":"Connect the output","text":"<p>We need to connect the agent's response to the Telegram node Send Text Message or Reply.</p> <ol> <li>Click the AI Agent node and press Run. It returns a JSON structure of the agent's response.</li> <li>Go to the Send Text Message or Reply node and delete placeholder <code>1</code> from the Text field.</li> <li>Click the Text field and in the right menu choose Stanley then press an arrow icon for the <code>text</code> key in JSON structure. The key is now imported into the field, as shown in the image below.</li> <li>Click Save.</li> </ol> <p></p> <p>All the configurations are done, and you can test how your first assistant works.</p> <p></p>"},{"location":"basic_tutorials/first_pa/#test-the-result","title":"Test the result","text":"<p>Let's have a look at a scenario when the assistant may be helpful. Below it is just an example, you can vary it as you'd like. You can also prepare some mock \"urgent\" Emails and tasks if you'd like to test that the assistant handles it right.</p> <ol> <li>Go to the Telegram dialogue with the bot. Ask him to check if there are anything urgent in your Email box.</li> <li>Ask him to draft the reply for an Email and appoint a meeting.</li> <li>Check the result in your Email, Todoist and Google Calendar.</li> </ol> <p>See an example in the images below.</p> <p> </p> <p>Instead of manual handling this three tools now you can manage them all by a single Telegram bot.</p> <p></p>"},{"location":"basic_tutorials/first_pa/#whats-next","title":"What's next","text":"<p>Think about your daily routines and how you could create an assistant to automate them. The links below might help.</p> <ul> <li>To learn more about the Latenode Nodes and and their features, see the Node concept as well as Node Reference.</li> <li>Check out How to create a scenario and How to create an efficient prompt guides.</li> </ul> <p>Feel free to visit our Community Forum and ask an advice.</p>"},{"location":"basic_tutorials/getting_started/","title":"Getting started","text":"<p>The Basic Tutorials category should include step-by-step tutorial for new users. It should explain how to start using basic trial version of the system: from creating an account to their first simplest automation.</p>"},{"location":"community/about/","title":"About Latenode Community","text":"<p>The Community category should include all necessary information about OpenSource community: Github, forums, channels, events, etc. Also it should include guides, conventions and standards on contribution to the product, like coding conventions, documentation style guide etc.</p>"},{"location":"community/contribute/","title":"How to contribute","text":"<p>The Community category should include all necessary information about OpenSource community: Github, forums, channels, events, etc. Also it should include guides, conventions and standards on contribution to the product, like coding conventions, documentation style guide etc.</p>"},{"location":"concepts/ai_agents/","title":"AI Agents","text":"<p>The Concepts category should contain theoretical explanations of the entities handled by Latenode, such as automations, scenarios, nodes, etc.</p>"},{"location":"concepts/auth/","title":"Authorizations","text":"<p>The Concepts category should include theoretical explanations of the entities handled by Latenode, such as automations, scenarios, nodes, and more.</p>"},{"location":"concepts/automation/","title":"Automations","text":"<p>The Concepts category should include theoretical explanations of the entities handled by Latenode, such as automations, scenarios, nodes, and more.</p>"},{"location":"concepts/node/","title":"Node","text":"<p>The Concepts category should include theoretical explanations of the entities handled by Latenode, such as automations, scenarios, nodes, and more.</p>"},{"location":"concepts/overview/","title":"Latenode Overview","text":"<p>The Concepts category should include theoretical explanations of the entities handled by Latenode, such as automations, scenarios, nodes, and more.</p>"},{"location":"concepts/scenario/","title":"Scenario","text":"<p>The Concepts category should include theoretical explanations of the entities handled by Latenode, such as automations, scenarios, nodes, and more.</p>"},{"location":"node_reference/ai_agent/","title":"AI Agent","text":"<p>The Node Reference category should include the full list of available nodes of Latenode and their functional descriptions.</p>"},{"location":"node_reference/data_storage/","title":"Data Storage","text":"<p>The Node Reference category should include the full list of available nodes of Latenode and their functional descriptions.</p>"},{"location":"user_guide/create_scenario/","title":"How to create a scenario","text":"<p>The User Guide category should include instructions on specific tasks that users may face during their work.</p>"},{"location":"user_guide/prompting_guide/","title":"How to create an efficient prompt \u2014 the Prompting Guide","text":"<p>The User Guide category should include instructions on specific tasks that users may face during their work.</p>"}]}